params.help = ""

params {
    help = false
    version = false
    out_dir = "output"
    store_dir = null
    fastq = null
    bam = null
    reference = null
    client_fields = null
    threads = 3
    chunk_size = 1000000
    run_prokka = true
    prokka_opts = null
    aws_image_prefix = null
    aws_queue = null
    sample = null
    sample_sheet = null
    disable_ping = false
    reference_based_assembly = false
    override_basecaller_cfg = null
    min_read_length = 1000

    flye_opts = null
    flye_genome_size = null
    flye_asm_coverage = null

    isolates = false
    resfinder_threshold = "0.8"
    resfinder_coverage = "0.6"

    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    analyse_unclassified = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wf'

    wf {
      example_cmd = [
            "--fastq 'wf-bacterial-genomes-demo/isolates_fastq'",
            "--isolates",
            "--sample_sheet 'wf-bacterial-genomes-demo/isolates_sample_sheet.csv'"
      ]
      common_sha = "sha9ef2f4e4585c4ce6a604616e77185077551abf50"
      container_sha = "shaae5767292fede67faaa109d507be17647b117b81"
      container_sha_prokka = "sha08669655982fbef7c750c7895e97e100196c4967"
      container_sha_medaka = "sha447c70a639b8bcf17dc49b51e74dfcde6474837b"
      container_sha_seqsero = "sha96053b39b281e404cf1cf9c4684fa7dbc4e2761d"
      container_sha_resfinder = "sha024ca117d06e35c5e4116bcb2cd6235b96916fcf"
      container_sha_mlst = "sha8f8f258761d66116deb5b58b4204e5b7783a0c90"
      agent = null
    }
}

manifest {
    name            = 'epi2me-labs/wf-bacterial-genomes'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-bacterial-genomes'
    description     = 'Assembly, variant calling, and annotation of bacterial genomes.'
    mainScript      = 'main.nf'
    nextflowVersion = '>=23.04.2'
    version         = 'v1.4.2'
}

epi2melabs {
  tags = "wf-bacterial-genomes,assembly,denovo,alignment,mosdepth,bacteria"
  icon = "faBacterium"
}


// used by default for "standard" (docker) and singularity profiles,
// other profiles may override.
process {
    withLabel:wf_common {
        container = "ontresearch/wf-common:${params.wf.common_sha}"
    }   
    withLabel:wfbacterialgenomes {
        container = "ontresearch/wf-bacterial-genomes:${params.wf.container_sha}"
    }
    withLabel:prokka {
        container = "ontresearch/prokka:${params.wf.container_sha_prokka}"
    }
    withLabel:medaka {
        container = "ontresearch/medaka:${params.wf.container_sha_medaka}"
    }
    withLabel:amr {
        container = "ontresearch/resfinder:${params.wf.container_sha_resfinder}"
    }
    withLabel:mlst {
        container = "ontresearch/mlst:${params.wf.container_sha_mlst}"
    }
    withLabel:seqsero2 {
        container = "ontresearch/seqsero2:${params.wf.container_sha_seqsero}"
    }
    shell = ['/bin/bash', '-euo', 'pipefail']
}

profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
 
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
    }

    conda {
        conda.enabled = true
    }

    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '32G'
            withLabel:wf_common {
                container = "${params.aws_image_prefix}-wf-common:${params.wf.common_sha}"
            }
            withLabel:wfbacterialgenomes {
                container = "${params.aws_image_prefix}-wf-bacterial-genomes:${params.wf.container_sha}"
            }
            withLabel:prokka {
                container = "${params.aws_image_prefix}-prokka:${params.wf.container_sha_prokka}-root"
            }
            withLabel:medaka {
                container = "${params.aws_image_prefix}-medaka:${params.wf.container_sha_medaka}"
            }
            withLabel:amr {
                container = "${params.aws_image_prefix}-resfinder:${params.wf.container_sha_resfinder}"
            }
            withLabel:mlst {
                container = "${params.aws_image_prefix}-mlst:${params.wf.container_sha_mlst}"
            }
            withLabel:seqsero2 {    
                container = "${params.aws_image_prefix}-seqsero2:${params.wf.container_sha_seqsero}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
  overwrite = true
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
  overwrite = true
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
  overwrite = true
}

env {
    PYTHONNOUSERSITE = 1
    JAVA_TOOL_OPTIONS="-Xlog:disable -Xlog:all=warning:stderr"
}
